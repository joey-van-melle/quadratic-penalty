---
title: "Rapport de laboratoire 4"
subtitle: "MTH8408"
author:
  - name: Votre nom
    email: votre.adresse@polymtl.ca
    affiliation:
      - name: Polytechnique Montréal
format:
  pdf:
    keep-tex: false
    documentclass: article
    include-in-header:
      - text: |
            \usepackage{eulervm}
            \usepackage{xspace}
            \usepackage[francais]{babel}
    geometry:
      - margin=1in
    papersize: letter
    colorlinks: true
    urlcolor: blue
engine: julia
---

```{julia}
#| output: false
using Pkg
Pkg.activate("labo7_env")
using LinearAlgebra
```

# Contexte

Dans ce laboratoire, on demande d'implémenter la méthodes de la pénalité quadratique pour le problème
$$
  \min_x \ f(x) \quad \text{s.t.} \ c(x) = 0,
$$ {#eq-nlp}
où $f : \mathbb{R}^n \to \mathbb{R}$ et $c: \mathbb{R}^n \to \mathbb{R}^m$ sont deux fois continûment différentiables.

# Question 1

En cours, nous avons vu la méthode de la pénalité quadratique pour résoudre ([-@eq-nlp]).

Dans cette question, on demande d'implémenter et de tester cette méthode *en utilisant vos méthodes de Newton modifiées* pour résoudre les sous-problèmes.

Votre implémentation doit avoir les caractéristiques suivantes :

1. prendre un `ADNLPModel` en argument ;
1. un critère d'arrêt absolu et relatif sur les résidus de KKT ;
2. un critère d'arrêt portant sur le nombre d'itérations (le nombre maximum d'itérations devrait dépendre du nombre de variables $n$ du problème) ;
2. toujours démarrer de l'approximation initiale spécifiée par le modèle ;
3. faire un choix de multiplicateurs de Lagrange initiaux ;
3. utiliser vos méthodes de Newton modifiées implémentées dans le rapport précédent pour résoudre les sous-problèmes ;
3. allouer un minimum en utilisant les opérations vectorisées (`.=`, `.+`, `.+=`, etc.) autant que possible ;
6. votre fonction principale doit être documentée---reportez-vous à [https://docs.julialang.org/en/v1/manual/documentation](https://docs.julialang.org/en/v1/manual/documentation) ;
7. faire afficher les informations pertinentes à chaque itération sous forme de tableau comme vu en cours.


```{julia}
function quad_penalty(model, eps_a=1.0e-5, eps_r=1.0e-5)
  # modifier la fonction fournie en laboratoire
end
```

# Résultats numériques

## Validation de la méthode de la pénalité quadratique

Résoudre tous les problèmes de `test_set.jl` avec chacune de vos méthodes de Newton modifiée pour les sous-problèmes.
Ceci vous donne deux variantes de la méthode de pénalité quadratique.

```{julia}
# votre code ici
```

## Résumé des résultats

Pour chaque variante, produire un tableau récapitulatif qui donne, pour chaque problème,

* son nom ;
* le nombre de variables ;
* le nombre de contraintes ;
* la valeur des résidus de KKT au point initial ;
* la valeur des résidus de KKT au point final ;
* la norme du vecteur final des multiplicateurs de Lagrange $y$ ;
* la valeur finale du paramètre de pénalité $\rho$ ;
* le nombre d'itérations de la méthode de pénalité quadratique ;
* le nombre total d'évaluations de $f$ et $c$ ;
* le statut final.

Le module `PrettyTables.jl` pourrait être utile.

```{julia}
# votre code ici
```

## Commentaires sur les résultats

<!-- Insérer ici votre évaluation des résultats -->
